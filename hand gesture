import cv2
import numpy as np
import HandTrackingModule as htm
import time
import autopy
import pyautogui
from tkinter import *
import _thread
import _pyinstaller_hooks_contrib
##########################
wCam, hCam = 640, 480
frameR = 100  # Frame Reduction
smoothening = 7

#########################
Running = True

def Main(name, double):
  global Running
  Running = True
  pTime = 0
  plocX, plocY = 0, 0
  clocX, clocY = 0, 0

  cap = cv2.VideoCapture(0)
  cap.set(3, wCam)
  cap.set(4, hCam)
  detector = htm.handDetector(maxHands=1)
  wScr, hScr = autopy.screen.size()
  # print(wScr, hScr)
  while Running:
    # 1. Find hand Landmarks
    success, img = cap.read()
    img = detector.findHands(img)
    lmList, bbox = detector.findPosition(img)
    # 2. Get the tip of the index and middle fingers
    if len(lmList) != 0:
        x1, y1 = lmList[8][1:]
        x2, y2 = lmList[12][1:]
        # print(x1, y1, x2, y2)

        # 3. Check which fingers are up
        fingers = detector.fingersUp()
        # print(fingers)
        cv2.rectangle(img, (frameR, frameR), (wCam - frameR, hCam - frameR),
                      (100, 0, 100), 2)
        # 4. Only Index Finger : Moving Mode
        if fingers[1] == 1 and fingers[2] == 0:
            # 5. Convert Coordinates
            x3 = np.interp(x1, (frameR, wCam - frameR), (0, wScr))
            y3 = np.interp(y1, (frameR, hCam - frameR), (0, hScr))
            # 6. Smoothen Values
            clocX = plocX + (x3 - plocX) / smoothening
            clocY = plocY + (y3 - plocY) / smoothening

            # 7. Move Mouse
            autopy.mouse.move(wScr - clocX, clocY)
            cv2.circle(img, (x1, y1), 15, (255, 0, 255), cv2.FILLED)
            plocX, plocY = clocX, clocY
        # 8. Both Index and middle fingers are up : Clicking Mode
        if fingers[1] == 1 and fingers[2] == 1:
            # 9. Find distance between fingers
            length, img, lineInfo = detector.findDistance(8, 12, img)
            print(length)
            # 10. Click mouse if distance short
            if length < 40:
                cv2.circle(img, (lineInfo[4], lineInfo[5]),
                           15, (0, 255, 0), cv2.FILLED)
                autopy.mouse.click()

            if  fingers[3] == 1 and fingers[4] == 1:
                    # 9. Find distance between fingers
                    length, img, lineInfo = detector.findDistance(16, 20, img)
                    print(length)
                    # 10. Click mouse if distance short
                    if length < 50:
                        cv2.circle(img, (lineInfo[4], lineInfo[5]),
                                   15, (0, 255, 0), cv2.FILLED)
                        pyautogui.press('space')
    # 11. Frame Rate
    cTime = time.time()
    fps = 1 / (cTime - pTime)
    pTime = cTime
    cv2.putText(img, str(int(fps)), (20, 50), cv2.FONT_HERSHEY_PLAIN, 3,
                (255, 0, 0), 3 )
    # 12. Display
    cv2.imshow("Image", img)
    cv2.waitKey(1)





def Stop():
    print("clicked")
    global Running
    Running = False



##################################################################################
# frontend
frame= Tk()
frame.title("Gesture control")
frame.geometry("550x350")
frame.configure(background="black")
frame.resizable(False, False)




# Show image using label
#https://pixabay.com/get/ga311887d0dc668ea3a7588b8bc2983a82425d94cb043b278a1987573cd3b5dac0ac80ce6ec14d99a7608d4a19e1cb1e8_640.png






C = Canvas(frame, bg="blue", height=250, width=300)
filename = PhotoImage(file = "rainbow.png")#you left the meeting
background_label = Label(frame, image=filename)
background_label.place(x=0, y=0, relwidth=1, relheight=1)


data = StringVar()
data.set("Gesture control")
display = Label(frame, bg="#fbaba1", fg="white", text="🅶🅴🆂🆃🆄🆁🅴 🅲
🅾
🅽🆃🆁
🅾
🅻",
 width=20, font=("areal", 24))

#𝔾𝕖𝕤𝕥𝕦𝕣𝕖 𝕔𝕠𝕟𝕥𝕣𝕠𝕝𝕝𝕖𝕣🅶🅴🆂🆃🆄🆁🅴 🅲
🅾
🅽🆃🆁
🅾
🅻

display.grid(row=0, columnspan=10, pady = 10)
#fbaba1#fbaba1
StartButton = Button(frame, bg="#fbaba1", fg="gray", text="ѕтarт", font=("arial", 30),bd=5, height=1, width=5, command=lambda:_thread.start_new_thread(Main, ("name", 2.0)))
StartButton.grid(row = 1, column = 0, padx =  55, pady = 50)
#fbaba1#fbaba1
StopButton = Button(frame,  bg="#fbaba1", fg='gray', text="sтσρ", font=("arial", 30), bd=5, height=1, width=5, command=lambda:Stop())

StopButton.grid(row = 1, column = 1, padx =  55, pady = 50)
#hey
frame.mainloop()
